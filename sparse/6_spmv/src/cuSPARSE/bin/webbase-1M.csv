==PROF== Connected to process 62026 (/home/hemeng/Documents/hemeng/mixed-precision-test/spmv_mix_precision_test/cusparse/bin/exe_spmv_cusparse_16BF_32_32)
2,4,8,1000005,1000005,3105536,32.6099,0.190466
==PROF== Disconnected from process 62026
==PROF== Report: /home/hemeng/Documents/hemeng/mixed-precision-test/spmv_mix_precision_test/cusparse/bin/test.ncu-rep
"ID","Process ID","Process Name","Host Name","Kernel Name","Context","Stream","Block Size","Grid Size","Device","CC","Section Name","Metric Name","Metric Unit","Metric Value","Rule Name","Rule Type","Rule Description"
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","GPU Speed Of Light Throughput","DRAM Frequency","cycle/second","10,227,848,101.27",
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","GPU Speed Of Light Throughput","SM Frequency","cycle/second","2,205,935,941.70",
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","67,154",
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","GPU Speed Of Light Throughput","Memory Throughput","%","83.94",
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","GPU Speed Of Light Throughput","DRAM Throughput","%","83.94",
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","GPU Speed Of Light Throughput","Duration","nsecond","30,336",
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","28.98",
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","GPU Speed Of Light Throughput","L2 Cache Throughput","%","37.00",
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","GPU Speed Of Light Throughput","SM Active Cycles","cycle","62,112.83",
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","26.89",
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","SpeedOfLight","","","","SOLBottleneck","INF","The kernel is utilizing greater than 80.0% of the available compute or memory performance of the device. To further improve performance, work will likely need to be shifted from the most utilized to another unit. Start by analyzing DRAM in the Memory Workload Analysis section."
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 64:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis."
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.70",
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.65",
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","Compute Workload Analysis","Issue Slots Busy","%","17.48",
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.70",
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","Compute Workload Analysis","SM Busy","%","17.48",
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","ComputeWorkloadAnalysis","","","","HighPipeUtilization","WRN","All compute pipelines are under-utilized. Either this kernel is very small or it doesn't issue enough warps per scheduler. Check the Launch Statistics and Scheduler Statistics sections for further details."
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","Memory Workload Analysis","Memory Throughput","byte/second","824,168,776,371.31",
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","Memory Workload Analysis","Mem Busy","%","37.00",
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","Memory Workload Analysis","Max Bandwidth","%","83.94",
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","Memory Workload Analysis","L1/TEX Hit Rate","%","36.16",
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","Memory Workload Analysis","L2 Compression Ratio","","0",
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","Memory Workload Analysis","L2 Hit Rate","%","33.22",
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","Memory Workload Analysis","Mem Pipes Busy","%","26.89",
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses 3.6 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 4.0 sectors per request, or 4.0*32 = 129.5 bytes of cache data transfers per request. The optimal thread address pattern for 3.6 byte accesses would result in 3.6*32 = 116.7 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global loads."
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for global stores in L1TEX might not be optimal. On average, this kernel accesses 3.6 bytes per thread per memory request; but the address pattern, possibly caused by the stride between threads, results in 4.1 sectors per request, or 4.1*32 = 132.7 bytes of cache data transfers per request. The optimal thread address pattern for 3.6 byte accesses would result in 3.6*32 = 116.7 bytes of cache data transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for uncoalesced global stores."
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.1 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory request."
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only accesses an average of 2.6 sectors out of the possible 4 sectors per cache line. Check the Source Counters section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory request."
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","WRN","The memory access pattern for loads from device memory causes 770,170 sectors to be read from DRAM, which is 1.0x of the 770,043 sectors causing a miss in the L2 cache. The DRAM fetch granularity for read misses in L2 is 64 bytes, i.e. the lower or upper half of an L2 cache line. Try changing your access pattern to make use of both sectors returned by a DRAM read request for optimal usage of the DRAM throughput. For strided memory reads, avoid strides of 64 bytes or larger to avoid moving unused sectors from DRAM to L2. "
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","Scheduler Statistics","One or More Eligible","%","17.56",
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","Scheduler Statistics","Issued Warp Per Scheduler","","0.18",
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","Scheduler Statistics","No Eligible","%","82.44",
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","Scheduler Statistics","Active Warps Per Scheduler","warp","10.67",
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.25",
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","SchedulerStats","","","","IssueSlotUtilization","WRN","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 5.7 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 12 warps per scheduler, this kernel allocates an average of 10.67 active warps per scheduler, but only an average of 0.25 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too."
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","60.80",
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","61.05",
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","Warp State Statistics","Avg. Active Threads Per Warp","","31.45",
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","28.82",
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","WarpStateStats","","","","CPIStall","WRN","On average, each warp of this kernel spends 42.9 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture, rtcore) operation. This represents about 70.6% of the total average of 60.8 cycles between issuing two instructions. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality or by changing the cache configuration, and consider moving frequently used data to registers and to shared memory."
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","WarpStateStats","","","","CPIStall","INF","Check the Source Counters section for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#sampling) provides more details on each stall reason."
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","10,812.19",
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","Instruction Statistics","Executed Instructions","inst","5,535,843",
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","10,857.31",
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","Instruction Statistics","Issued Instructions","inst","5,558,941",
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","InstructionStats","","","","FPInstructions","WRN","This kernel executes 0 fused and 396596 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 50% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions."
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","Launch Statistics","Block Size","","128",
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","Launch Statistics","Grid Size","","3,033",
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","Launch Statistics","Registers Per Thread","register/thread","40",
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","Launch Statistics","Shared Memory Configuration Size","byte","65,536",
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","Launch Statistics","Driver Shared Memory Per Block","byte/block","1,024",
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","Launch Statistics","Static Shared Memory Per Block","byte/block","4,224",
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","Launch Statistics","Threads","thread","388,224",
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","Launch Statistics","Waves Per SM","","1.97",
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","Occupancy","Block Limit SM","block","24",
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","Occupancy","Block Limit Registers","block","12",
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","Occupancy","Block Limit Shared Mem","block","12",
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","Occupancy","Block Limit Warps","block","12",
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","Occupancy","Theoretical Active Warps per SM","warp","48",
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","Occupancy","Theoretical Occupancy","%","100",
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","Occupancy","Achieved Occupancy","%","88.71",
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","Occupancy","Achieved Active Warps Per SM","warp","42.58",
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","Occupancy","","","","Occupancy","WRN","This kernel's theoretical occupancy is not impacted by any block limit. The difference between calculated theoretical (100.0%) and measured achieved occupancy (88.7%) can be the result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy."
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","Source Counters","Branch Instructions Ratio","%","0.07",
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","Source Counters","Branch Instructions","inst","384,101",
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","Source Counters","Branch Efficiency","%","98.22",
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","Source Counters","Avg. Divergent Branches","","8.43",
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","SourceCounters","","","","UncoalescedGlobalAccess","WRN","This kernel has uncoalesced global accesses resulting in a total of 543143 excessive sectors (31% of the total 1743059 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional information on reducing uncoalesced device memory accesses."
"0","62026","exe_spmv_cusparse_16BF_32_32","127.0.0.1","void cusparse::csrmv_v3_kernel<(bool)0, int, int, cusparse::Bfloat, cusparse::Bfloat, float, float, void>(cusparse::KernelCoeffs<T7>, const T3 *, const T2 *, const T3 *, const T4 *, T2, int, int, const T5 *, T6 *, T3 *, T7 *)","1","7","(128, 1, 1)","(3033, 1, 1)","0","8.9","SourceCounters","","","","UncoalescedSharedAccess","WRN","This kernel has uncoalesced shared accesses resulting in a total of 155736 excessive wavefronts (24% of the total 638252 wavefronts). Check the L1 Wavefronts Shared Excessive table for the primary source locations. The CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#shared-memory-in-matrix-multiplication-c-aa) has an example on optimizing shared memory accesses."
